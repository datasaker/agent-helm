# Default values for datasaker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

############################
###### default values ######
default:
  volumes:
    - name: dsk-mount
      hostPath:
        path: '/var/datasaker'
        type: DirectoryOrCreate
    - name: global-config
      configMap:
        name: agent-global-config
        items:
          - key: global-config.yml
            path: global-config.yml

  volumeMounts:
    - name: dsk-mount
      mountPath: '/var/datasaker'
      mountPropagation: HostToContainer
    - name: global-config
      subPath: global-config.yml
      mountPath: '/etc/datasaker/global-config.yml'

  metricConfig:
    filtering_configs:
      rule: drop
      metric_list:
        - go_gc_duration_seconds
        - go_goroutines
        - go_DEBUG
        - go_memstats_alloc_bytes
        - go_memstats_alloc_bytes_total
        - go_memstats_buck_hash_sys_bytes
        - go_memstats_frees_total
        - go_memstats_gc_cpu_fraction
        - go_memstats_gc_sys_bytes
        - go_memstats_heap_idle_bytes
        - go_memstats_heap_inuse_bytes
        - go_memstats_heap_objects
        - go_memstats_heap_released_bytes
        - go_memstats_heap_sys_bytes
        - go_memstats_last_gc_time_seconds
        - go_memstats_lookups_total
        - go_memstats_mallocs_total
        - go_memstats_mcache_inuse_bytes
        - go_memstats_mcache_sys_bytes
        - go_memstats_mspan_inuse_bytes
        - go_memstats_mspan_sys_bytes
        - go_memstats_next_gc_bytes
        - go_memstats_other_sys_bytes
        - go_memstats_stack_inuse_bytes
        - go_memstats_stack_sys_bytes
        - go_memstats_sys_bytes
        - go_threads

##############################
###### datasaker values ######
dataSaker:
  registryAddr: 'nexus2.exem-oss.org/saas'

# DataSaker target address list
  metricDataGate: '10.10.34.129:30031'
  jaegerDataGate: '10.10.34.129:30032'
  manifestDataGate: '10.10.34.129:30033'
  planDataGate: '10.10.34.129:30035'
  logGate: '10.10.34.129:32032'
  agentManager: '10.10.34.130:32701'
  agentManagerBaseUrl: /dsk-agentmanager-api/agent

# 고객 정보
  hostMount: '/var/datasaker'
  configDir: '/etc/datasaker'

# agent install config
  nodeAgent:
    kind: 'dsk-node-agent'
    imgPolicy: 'Always'
    imgVersion: 'latest'
    logLevel: 'DEBUG'
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1000Mi

  containerAgent:
    kind: 'dsk-container-agent'
    imgPolicy: 'Always'
    imgVersion: 'latest'
    logLevel: 'DEBUG'
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1000Mi

  kubeStateAgent:
    kind: 'dsk-kube-state-agent'
    imgPolicy: 'Always'
    imgVersion: 'latest'
    logLevel: 'DEBUG'
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1000Mi

  k8sAgent:
    kind: 'dsk-k8s-agent'
    imgPolicy: 'Always'
    imgVersion: 'latest'
    logLevel: 'DEBUG'
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1000Mi

  logAgent:
    kind: 'dsk-log-agent'
    list: []

  planAgent:
    kind: 'dsk-plan-agent'
    list: []

  postgresAgent:
    kind: 'dsk-postgres-agent'
    list: []

  elasticsearchAgent:
    kind: 'dsk-elasticsearch-agent'
    list: []

  mongoAgent:
    kind: 'dsk-mongo-agent'
    list: []

  mysqlAgent:
    kind: 'dsk-mysql-agent'
    list: []


  jaegerAgent:
    kind: 'dsk-jaeger-agent'
    replicas: 1
    nodePort: 300001
    imgPolicy: 'Always'
    imgVersion: 'latest'
    logLevel: 'DEBUG'
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1000Mi